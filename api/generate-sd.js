import Replicate from 'replicate';
import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
dotenv.config();

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Helper function to convert base64 data URL to buffer for Gemini
function base64ToBuffer(base64Data) {
  const base64String = base64Data.replace(/^data:image\/\w+;base64,/, '');
  return Buffer.from(base64String, 'base64');
}

// Helper function to get mime type from base64 data URL
function getMimeType(base64Data) {
  const match = base64Data.match(/^data:(image\/\w+);base64,/);
  return match ? match[1] : 'image/png';
}

export default async function handler(req, res) {
  // Allow all origins (CORS)
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  res.setHeader('Access-Control-Allow-Credentials', 'true');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { prompt, image } = req.body;
    
    if (!prompt || prompt.length < 3) {
      return res.status(400).json({ error: 'Please provide a detailed prompt' });
    }

    // If image is provided, use Gemini Flash 2.0 to analyze and create an enhanced prompt
    if (image) {
      console.log('Using Gemini Flash 2.0 to analyze image and create prompt:', prompt);
      
      try {
        // Use Gemini 2.0 Flash for fast vision capabilities
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-image" });
        console.log(`Model: ${model}`);
        
        // Prepare the image data for Gemini
        const imageBuffer = base64ToBuffer(image);
        const mimeType = getMimeType(image);
        
        const imagePart = {
          inlineData: {
            data: imageBuffer.toString('base64'),
            mimeType: mimeType
          }
        };
        
        // // Create a prompt for Gemini to analyze the image and incorporate changes
        // const visionPrompt = `Analyze this image carefully and create a detailed image generation prompt that:
        // 1) Preserves the original style, colors, composition, and key visual elements
        // 2) Incorporates this modification: "${prompt}"
        // 3) Is optimized for image generation AI models

        // Provide only the enhanced prompt text, no explanations or additional text.`;
        
        // const visionResult = await model.generateContent([visionPrompt, imagePart]);
        // const visionResponse = await visionResult.response;
        // const optimizedPrompt = visionResponse.text().trim();
        
        // console.log('Gemini Flash 2.0-enhanced prompt:', optimizedPrompt);
        
        // Generate new image with Gemini native image generation
        const result = await model.generateContent({
          contents: [{
            role: 'user',
            parts: [
              {
                text: `Based on this image, ${prompt}. Generate a new image that incorporates these changes while preserving the original style and composition. High quality, detailed, professional.`
              },
              imagePart
            ]
          }],
          generationConfig: {
            responseModalities: ['IMAGE'],
            temperature: 0.4,
            topK: 32,
            topP: 1,
          }
        });
        
        const response = await result.response;
        console.log(`Response: ${response}`);
        const generatedImage = response.candidates[0]?.content?.parts?.find(
          part => part.inlineData
        );
        
        if (!generatedImage) {
          throw new Error('No image generated by Gemini');
        }
        
        const base64Image = `data:${generatedImage.inlineData.mimeType};base64,${generatedImage.inlineData.data}`;
        
        // // Generate new image with Stable Diffusion XL using the enhanced prompt
        // const inputConfig = {
        //   prompt: `${optimizedPrompt}, high quality, detailed, professional`,
        //   negative_prompt: "ugly, blurry, low quality, distorted, text, watermark, deformed",
        //   width: 1024,
        //   height: 1024,
        //   num_outputs: 1,
        //   num_inference_steps: 40,
        //   guidance_scale: 7.5
        // };
        
        // const output = await replicate.run(
        //   "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
        //   { input: inputConfig }
        // );

        // const imageUrl = output[0];
        
        // // Download and convert to base64 for consistent response
        // const imageResponse = await fetch(imageUrl);
        // const resultBuffer = await imageResponse.arrayBuffer();
        // const base64Image = `data:image/png;base64,${Buffer.from(resultBuffer).toString('base64')}`;
        
        res.status(200).json({
          success: true,
          imageUrl: base64Image,
          prompt: prompt,
          model: 'gemini-2.0-flash-imagen'
        });
        
      } catch (visionError) {
        console.error('Gemini Flash 2.0 error:', visionError);
        
        // Fallback: generate with original prompt if vision analysis fails
        console.log('Falling back to direct generation');
        
        // const inputConfig = {
        //   prompt: `${prompt}, high quality, detailed, vibrant artwork, professional design`,
        //   negative_prompt: "ugly, blurry, low quality, distorted, text, watermark",
        //   width: 1024,
        //   height: 1024,
        //   num_outputs: 1,
        //   num_inference_steps: 30,
        //   guidance_scale: 7.5
        // };
        
        // const output = await replicate.run(
        //   "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
        //   { input: inputConfig }
        // );

        // const imageUrl = output[0];
        // const imageResponse = await fetch(imageUrl);
        // const resultBuffer = await imageResponse.arrayBuffer();
        // const base64Image = `data:image/png;base64,${Buffer.from(resultBuffer).toString('base64')}`;
        
        res.status(200).json({
          success: false,
          error: visionError.message,
          prompt: prompt,
          model: 'gemini-2.0-flash-error'
        });
      }
      
    } else {
      // No image provided, use Stable Diffusion XL
      console.log('Generating with Stable Diffusion XL (text-only):', prompt);
      
      try {
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-image" });
        
        const result = await model.generateContent({
          contents: [{
            role: 'user',
            parts: [{
              text: `Create a high-quality image: ${prompt}. high quality, detailed, vibrant artwork, professional design for a t-shirt`
            }]
          }],
          generationConfig: {
            responseModalities: ['IMAGE'],
            temperature: 0.4,
            topK: 32,
            topP: 1,
          }
        });
        
        const response = await result.response;
        const generatedImage = response.candidates[0]?.content?.parts?.find(
          part => part.inlineData
        );
        
        if (!generatedImage) {
          throw new Error('No image generated by Gemini');
        }
        
        const base64Image = `data:${generatedImage.inlineData.mimeType};base64,${generatedImage.inlineData.data}`;
        
        res.status(200).json({
          success: true,
          imageUrl: base64Image,
          prompt: prompt,
          model: 'gemini-2.0-flash-imagen'
        });
        
      } catch (error) {
        console.error('Gemini generation error:', error);
        
        res.status(500).json({
          success: false,
          error: error.message,
          prompt: prompt
        });
      }
      
      // const inputConfig = {
      //   prompt: `${prompt}, high quality, detailed, vibrant artwork, professional t-shirt design`,
      //   negative_prompt: "ugly, blurry, low quality, distorted, text, watermark",
      //   width: 1024,
      //   height: 1024,
      //   num_outputs: 1,
      //   num_inference_steps: 30,
      //   guidance_scale: 7.5
      // };
      
      // const output = await replicate.run(
      //   "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
      //   { input: inputConfig }
      // );

      // const imageUrl = output[0];

      // res.status(200).json({
      //   success: true,
      //   imageUrl: imageUrl,
      //   prompt: prompt,
      //   model: 'stable-diffusion-xl'
      // });
    }

  } catch (error) {
    console.error('Generation error:', error);
    
    if (error.message && error.message.includes('safety')) {
      return res.status(400).json({
        error: 'Invalid prompt. Please try a different description.'
      });
    }
    
    if (error.message && error.message.includes('SAFETY')) {
      return res.status(400).json({
        error: 'Content safety filter triggered. Please try a different prompt or image.'
      });
    }
    
    if (error.message && error.message.includes('image')) {
      return res.status(400).json({
        error: 'Invalid image format. Please try a different image.'
      });
    }

    res.status(500).json({
      error: 'Failed to generate design. Please try again.'
    });
  }
}
